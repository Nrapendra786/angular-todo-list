{"ast":null,"code":"import { WelcomeDataService } from \"./welcome-data.service\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { API_URL } from \"../app.constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./welcome-data.service\";\nexport const AUTHENTICATED_USER = \"authenticateUser\";\nexport const TOKEN = \"token\";\nexport let BasicAuthenticationService = /*#__PURE__*/(() => {\n  class BasicAuthenticationService {\n    constructor(http, welcomeData) {\n      this.http = http;\n      this.welcomeData = welcomeData;\n    }\n    getAuthenticatedUser() {\n      return sessionStorage.getItem(AUTHENTICATED_USER);\n    }\n    getAuthenticatedToken() {\n      if (this.getAuthenticatedUser) {\n        // console.log(\"get authenticated user \", sessionStorage.getItem(TOKEN));\n        return sessionStorage.getItem(TOKEN);\n      }\n    }\n    isUserLoggedIn() {\n      let user = sessionStorage.getItem(AUTHENTICATED_USER);\n      if (user === null) {\n        //user not logged in\n        return false;\n      } else {\n        return true;\n      }\n    }\n    // when logged out, clear storage.\n    userLoggedOut() {\n      sessionStorage.clear();\n    }\n    // executeJWTAuthenticationService(username, password) {\n    //   return this.http\n    //     .post<AuthenticationBean>(`${API_URL}/authenticate`, {\n    //       username,\n    //       password\n    //     })\n    //     .pipe(\n    //       map(data => {\n    //         sessionStorage.setItem(AUTHENTICATED_USER, username);\n    //         sessionStorage.setItem(TOKEN, `Bearer ${data.token}`);\n    //         return data;\n    //       })\n    //     );\n    // }\n    executeBasicAuthenticationService(username, password) {\n      const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\").set(\"Authorization\", \"Basic \" + window.btoa(username + \":\" + password));\n      let basicAuthHeaderString = \"Basic \" + window.btoa(username + \":\" + password); //encode byte 64 encoding window.btoa\n      return this.http.get(`${API_URL}/basicAuth`, {\n        headers\n      }).pipe(\n      // pipe \"if theres succcess data, do this... \"\n      map(data => {\n        sessionStorage.setItem(AUTHENTICATED_USER, username);\n        sessionStorage.setItem(TOKEN, basicAuthHeaderString);\n        console.log(\"basicAuthHeaderString \", basicAuthHeaderString);\n        return data;\n      }));\n    }\n    basicAuthHeader() {\n      let username;\n      let password;\n      let basicAuthHeaderString = \"Basic \" + window.btoa(username + \":\" + password); //encode byte 64 encoding window.btoa\n      console.log(\"header string \" + basicAuthHeaderString);\n      return basicAuthHeaderString;\n    }\n    static #_ = this.ɵfac = function BasicAuthenticationService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BasicAuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.WelcomeDataService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BasicAuthenticationService,\n      factory: BasicAuthenticationService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return BasicAuthenticationService;\n})();\nexport class AuthenticationBean {\n  constructor(message) {\n    this.message = message;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}