{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { BasicAuthenticationService } from \"../basic-authentication.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../basic-authentication.service\";\n// we are intercepting the request\n// adding the authorization header\n// then we are sending it to the next Http handler\nexport let HttpInterceptorService = /*#__PURE__*/(() => {\n  class HttpInterceptorService {\n    constructor(basicAuthService) {\n      this.basicAuthService = basicAuthService;\n    }\n    intercept(req, next) {\n      let basicAuthHeaderString = this.basicAuthService.getAuthenticatedToken();\n      // console.log(\"basicAuthHeaderString \", basicAuthHeaderString);\n      let user = this.basicAuthService.getAuthenticatedUser();\n      console.log(\"user \", user);\n      if (basicAuthHeaderString && user) {\n        req.clone({\n          setHeaders: {\n            Authorization: basicAuthHeaderString\n          }\n        });\n      }\n      return next.handle(req);\n    }\n    static #_ = this.ɵfac = function HttpInterceptorService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpInterceptorService)(i0.ɵɵinject(i1.BasicAuthenticationService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpInterceptorService,\n      factory: HttpInterceptorService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return HttpInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}